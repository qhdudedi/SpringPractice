## 인터페이스

: 자바에서 클래스에 포함하는 메서드의 구체적인 내용을 작성하지 않고 상수와 메서드 타입만 정의한 것 → 다른 클래스에서 구현하는 것을 전제로 만들어짐

```java
public interface Greet{
	/**
	* 인사하기
	*/
	void greeting();
	public abstract void greeting(); // public abstract 접근 제어자 붙은 추상 클래스
}
```

>> 인터페이스를 선언한 메서드 → public abstract 접근 제어자가 붙은 추상 클래스 

>> 인터페이스에 변수를 선언한 경우 → public static final를 붙여 상수가 됨

```java
# 인터페이스 구현할 떄 implements 키워드 사용
public class MorningGreet implements Greet{
	@Override
	public void greeting(){
		System.out.println("좋은 아침입니다");
	}
}
```

`@Override` ⇒ 슈퍼 클래스나 인터페이스의 메서드를 상속 혹은 구현하는 클래스에서 재정의하는 것

1. 리스트 
    1. 컬렉션 프레임워크에서 제공하는 인터페이스 
    2. 여러 데이터를 순서대로 정렬하여 저장할 때 사용
   ArrayList 	List 인터페이스의 구현 클래스에서 가장 많이 사용 → 요소를 배열로 유지하기 때문에 요소의 검색 고속 처리 가능 but 요소 수 많아지면 추가/삭제 처리하는 데 시간이 걸림
   LinkedList	요소끼리 전후 양방향의 링크로 참조하는 리스트 구조를 이용해 관리하기 때문에 요소의 추가나 삭제가 ArrayList보다 빠름 but 특정 요소 검색과 같은 인덱스 값에 의한 무작위 액세스 적합 X
